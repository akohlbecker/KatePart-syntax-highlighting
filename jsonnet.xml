<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE language SYSTEM "language.dtd">
<!--

 ***************************************************************************
 ** Writing a Kate Highlighting XML File
 ** http://kate-editor.org/article/writing_a_kate_highlighting_xml_file
 **
 ** Introducing Jsonnet
 ** https://jsonnet.org/
 ** https://jsonnet.org/ref/spec.html
 **
 ** This syntax Highlighting definition is based on json.xml by
 ** Sebastian Pipping (sebastian@pipping.org)
 ** https://kate-editor.org/syntax/data/syntax/json.xml
 ***************************************************************************
-->
<language name="jsonnet" version="1" kateversion="2.4" section="Markup" extensions="*.jsonnet;*.libsonnet;*.libjsonnet"  mimetype="application/jsonnet" author="Andreas Kohlbecker" license="GPL">
  <highlighting>
    <list name="Constants">
      <item>null</item>
      <item>true</item>
      <item>false</item>
    </list>

    <list name="Scope">
      <item>local</item>
    </list>

    <list name="Function">
      <item>std.isString</item>
      <item>std.isNumber</item>
      <item>std.isBoolean</item>
      <item>std.isObject</item>
      <item>std.isArray</item>
      <item>std.isFunction</item>
      <item>std.acos</item>
      <item>std.asin</item>
      <item>std.atan</item>
      <item>std.ceil</item>
      <item>std.char</item>
      <item>std.codepoint</item>
      <item>std.cos</item>
      <item>std.exp</item>
      <item>std.exponent</item>
      <item>std.filter</item>
      <item>std.floor</item>
      <item>std.force</item>
      <item>std.length</item>
      <item>std.log</item>
      <item>std.makeArray</item>
      <item>std.mantissa</item>
      <item>std.sign</item>
      <item>std.equals</item>
      <item>std.prune</item>
      <item>std.pow</item>
      <item>std.sin</item>
      <item>std.sqrt</item>
      <item>std.tan</item>
      <item>std.type</item>
      <item>std.max</item>
      <item>std.min</item>
      <item>std.mod</item>
      <item>std.thisFile</item>
      <item>std.abs</item>
      <item>std.assertEqual</item>
      <item>std.escapeString(Bash</item>
      <item>std.Dollars</item>
      <item>std.Json</item>
      <item>std.Python</item>
      <item>std.filterMap</item>
      <item>std.flattenArrays</item>
      <item>std.foldl</item>
      <item>std.foldr</item>
      <item>std.format</item>
      <item>std.join</item>
      <item>std.mapWithIndex</item>
      <item>std.mapWithKey</item>
      <item>std.deepJoin</item>
      <item>std.mergePatch</item>
      <item>std.lines</item>
      <item>std.map</item>
      <item>std.find</item>
      <item>std.findSubstr</item>
      <item>std.splitLimit</item>
      <item>std.strReplace</item>
      <item>std.asciiUpper</item>
      <item>std.asciiLower</item>
      <item>std.set</item>
      <item>std.setDiff</item>
      <item>std.setInter</item>
      <item>std.setMember</item>
      <item>std.setUnion</item>
      <item>std.sort</item>
      <item>std.resolvePath</item>
      <item>std.base64</item>
      <item>std.base64Decode</item>
      <item>std.base64DecodeBytes</item>
      <item>std.split</item>
      <item>std.stringChars</item>
      <item>std.substr</item>
      <item>std.toString</item>
      <item>std.startsWith</item>
      <item>std.endsWith</item>
      <item>std.parseInt</item>
      <item>std.parseOctal</item>
      <item>std.parseHex</item>
      <item>std.range</item>
      <item>std.uniq</item>
      <item>std.slice</item>
      <item>std.count</item>
      <!-- TODO:
        objectFields(All)?|objectHas(All)?|
        manifest(Ini|Python(Vars)?|Json(Ex)?|Yaml(Doc|Stream)|XmlJsonml
      manifest(Ini|Python(Vars)?|Json(Ex)?|Yaml(Doc|Stream)|XmlJsonml
      -->
    </list>

    <list name="Storage">
      <item>import</item>
      <item>importstr</item>
    </list>

     <list name="other">
      <item>tailstrict</item>
     </list>

    <contexts>
      <context name="Base" lineEndContext="#stay" attribute="Style_Normal">
        <IncludeRules context="Keywords"/>
        <IncludeRules context="Expressions"/>
      </context>

      <context name="Keywords" lineEndContext="#stay" attribute="Style_Normal">
        <keyword attribute="Style_Keyword" context="#stay" String="Scope" />
        <keyword attribute="Style_Function" weakDeliminator="." context="#stay" String="Function" />
        <keyword attribute="Style_Storage" context="#stay" String="Storage" />
      </context>

      <context name="Expressions" lineEndContext="#stay" attribute="Style_Normal">

        <IncludeRules context="FindComments"/>

        <RegExpr String="&quot;" context="String_Double" attribute="Style_String_Value"/>
        <RegExpr String="'" context="String_Single" attribute="Style_String_Value"/>
        <RegExpr String="\|\|\|" context="Text_Block" attribute="Style_String_Value"/>

        <RegExpr String="\b(\d+([Ee][+-]?\d+)?)\b" attribute="Style_Decimal" context="#stay" />

        <RegExpr String="\b\d+[.]\d*\([Ee][+-]?\d+)?\b" attribute="Style_Float" context="#stay" />

        <RegExpr String="\b[.]\d+([Ee][+-]?\d+)?\b" attribute="Style_Float" context="#stay" />

        <RegExpr String="\b[$]\b" context="#stay" attribute="Style_Variable"/>

        <RegExpr String="[a-zA-Z_][\.a-z0-9A-Z_]*\s*\(" context="Function" attribute="Style_Function"/>
      </context>

      <context name="String_Double" lineEndContext="" attribute="Style_String_Value">
        <IncludeRules context="Inside_String"/>
        <RegExpr String="&quot;" context="#pop" attribute="Style_String_Value"/>
      </context>

      <context name="String_Single" lineEndContext="" attribute="Style_String_Value">
        <IncludeRules context="Inside_String"/>
        <RegExpr String="'" context="#pop" attribute="Style_String_Value"/>
      </context>

      <context name="Text_Block" lineEndContext="" attribute="Style_String_Value">
        <IncludeRules context="Inside_String"/>
        <RegExpr String="\|\|\|" context="#pop" attribute="Style_String_Value"/>
      </context>

      <context name="Inside_String" lineEndContext="" attribute="Style_String_Value">
        <RegExpr String="\\([&quot;\\/bfnrt]|(u[0-9a-fA-F]{4}))" attribute="Style_String_Escape" context="#stay" />
        <RegExpr String="\\[^&quot;\\/bfnrtu]" attribute="Style_Error" context="#stay" />
        <RegExpr String="\$\{.+?\}" attribute="Style_Variable" context="#stay" />
      </context>

      <!-- find and style comments # // /* comment */ -->
      <context name="FindComments" attribute="Normal Text" lineEndContext="#stay">
          <DetectChar attribute="Comment" context="IsComments" char="#" lookAhead="true"/>
          <Detect2Chars attribute="Comment" context="IsComments" char="/" char1="/" lookAhead="true"/>
          <Detect2Chars attribute="Comment" context="IsComments" char="/" char1="*" lookAhead="true"/>
      </context>

      <context name="IsComments" attribute="Normal Text" lineEndContext="#stay">
          <DetectChar attribute="Style_Comment" context="Comment" char="#" />
          <Detect2Chars attribute="Style_Comment" context="Comment" char="/" char1="/" />
          <Detect2Chars attribute="Style_Comment" context="MultilineComment" char="/" char1="*" beginRegion="comment"/>
      </context>

      <context name="Comment" attribute="Style_Comment" lineEndContext="#pop#pop">
        <IncludeRules context="##Alerts" />
        <IncludeRules context="##Modelines" />
      </context>
      <context name="MultilineComment" attribute="Style_Comment" lineEndContext="#stay">
        <IncludeRules context="##Alerts" />
        <IncludeRules context="##Modelines" />
        <RegExpr String="\*/" context="#pop#pop" attribute="Style_Comment" endRegion="comment"/>
      </context>

      <context name="Function" attribute="Style_Normal">
        <IncludeRules context="Keywords"/>
        <IncludeRules context="Expressions"/>
        <RegExpr String="\)(\s*::?:?)?" context="#pop" attribute="Style_Function"/>
      </context>

    </contexts>

    <itemDatas>
      <itemData name="Style_Normal" defStyleNum="dsNormal"/>

      <itemData name="Style_Comment" defStyleNum="dsComment" />

      <itemData name="Style_Seperator_Pair" defStyleNum="dsFunction" bold="true"/>
      <itemData name="Style_Seperator_Array" defStyleNum="dsOthers" bold="true"/>

      <itemData name="Style_Decimal" defStyleNum="dsDecVal"/>
      <itemData name="Style_Float" defStyleNum="dsFloat"/>
      <itemData name="Style_String_Key" defStyleNum="dsDataType"/>
      <itemData name="Style_String_Value" defStyleNum="dsString"/>
      <itemData name="Style_String_Escape" defStyleNum="dsSpecialChar"/>

      <itemData name="Style_String_Key_Char" defStyleNum="dsChar"/>
      <itemData name="Style_String_Value_Char" defStyleNum="dsChar"/>
      <itemData name="Style_Operator_Char"  defStyleNum="dsOperator"/>
      <itemData name="Style_Function" defStyleNum="dsFunction"/>
      <itemData name="Style_Variable" defStyleNum="dsVariable"/>
      <itemData name="Style_Keyword" defStyleNum="dsKeyword"/>
      <itemData name="Style_Storage" defStyleNum="dsImport" />
      <itemData name="Style_Error" defStyleNum="dsError"/>
    </itemDatas>
  </highlighting>

  <general>
    <comments>
      <comment name="singleLine" start="#"/>
      <comment name="singleLine" start="//"/>
      <comment name="multiLine" start="/*" end="*/" region="CommentFolding"/>
    </comments>
    <keywords casesensitive="1"/>
    <folding indentationsensitive="0"/>
    <emptyLines>
      <emptyLine regexpr="\s+"/>
    </emptyLines>
  </general>
</language>
<!--
// kate: space-indent on; indent-width 2; replace-tabs on;
-->
